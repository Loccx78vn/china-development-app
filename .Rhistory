version = 5,
bootswatch = "flatly",
primary = "#1b9e77",
"navbar-bg" = "#081D58"
) %>%
bs_add_rules(
".bg-gradient { background: linear-gradient(135deg, #ffffcc, #a1dab4, #41b6c4, #2c7fb8, #253494); }
.card-header { background-color: #41b6c4; color: white; font-weight: bold; }"
),
# Custom CSS
tags$head(
tags$link(rel = "stylesheet", href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"),
tags$link(rel = "stylesheet", href = "styles.css"),
tags$script(src = "scripts.js")
)
),
library(shiny)
library(bslib)
library(plotly)
library(leaflet)
library(DT)
library(bsicons)
library(shinyjs)
ui <- fluidPage(
# Apply custom theme
theme = bs_theme(
version = 5,
bootswatch = "flatly",
primary = "#1b9e77",
"navbar-bg" = "#081D58"
) %>%
bs_add_rules(
".bg-gradient { background: linear-gradient(135deg, #ffffcc, #a1dab4, #41b6c4, #2c7fb8, #253494); }
.card-header { background-color: #41b6c4; color: white; font-weight: bold; }"
),
# Custom CSS
tags$head(
tags$link(rel = "stylesheet", href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"),
tags$link(rel = "stylesheet", href = "styles.css"),
tags$script(src = "scripts.js")
),
# Header
div(class = "header",
h2("Economic Dashboard 2025"),
div(class = "header-buttons",
actionButton("showTableBtn", HTML("<i class='fas fa-table'></i> Show Stock Data"), class = "btn btn-light btn-sm")
)
),
# Main content with navset
layout_columns(
# Left sidebar
col_widths = c(3, 9),
card(class = "sidebar-left h-100",
card_image(src = "https://via.placeholder.com/300x150?text=Dashboard+Info", class = "card-img-top"),
tags$h4("Dashboard Information", class = "mt-3"),
tags$p("This dashboard provides economic insights across different perspectives:"),
tags$ul(
tags$li(tags$strong("Overview:"), " Key economic indicators over time"),
tags$li(tags$strong("Map:"), " Geographic visualization of economic data"),
tags$li(tags$strong("Stock:"), " Market performance of major companies")
),
tags$hr(),
tags$p(class = "text-muted fst-italic", "Last updated: March 2023"),
tags$div(class = "d-grid gap-2", downloadButton("downloadData", "Download Data", class = "btn-outline-primary"))
),
# Main content area with tabs (no titles)
card(
navset_card_underline(
# Overview Tab
nav_panel(
title = "Overview",
div(class = "chart-header", "Economic Growth Overview"),
card(class = "bg-light p-3", plotlyOutput("lineChart", height = "400px")),
layout_column_wrap(
width = 1/3,
card(card_header("GDP Growth"), "4.2%", tags$span(class = "text-success", HTML("<i class='fas fa-arrow-up'></i> 0.3%"))),
card(card_header("Inflation"), "2.1%", tags$span(class = "text-danger", HTML("<i class='fas fa-arrow-up'></i> 0.5%"))),
card(card_header("Unemployment"), "3.6%", tags$span(class = "text-success", HTML("<i class='fas fa-arrow-down'></i> 0.2%")))
)
),
# Map Tab
nav_panel(
title = "Map",
navset_underline(
# Static Map
nav_panel(
title = "Static",
div(class = "chart-header", "Economic Indicators by Region"),
layout_column_wrap(
width = 1/4,
selectInput("selectYear", "Select Year:", choices = 2020:2023, width = "100%"),
selectInput("selectIndicator", "Indicator:", choices = c("GDP Growth", "Inflation", "Unemployment"), width = "100%")
),
card(class = "p-3 bg-light", plotOutput("staticMap", height = "500px"))
),
# Interactive Map
nav_panel(
title = "Interactive",
div(class = "chart-header", "Interactive Economic Map"),
layout_column_wrap(
width = 1/4,
selectInput("selectYear2", "Select Year:", choices = 2020:2023, width = "100%"),
selectInput("selectView", "View Mode:", choices = c("Markers", "Heatmap", "Choropleth"), width = "100%")
),
card(class = "p-3 bg-light", leafletOutput("interactiveMap", height = "500px"))
)
)
),
# Stock Tab
nav_panel(
title = "Stock",
div(class = "chart-header", "Stock Market Performance"),
layout_column_wrap(
width = 1/4,
selectInput("selectCompany", "Select Company:", choices = c("Apple", "Google", "Microsoft", "Amazon"), width = "100%"),
selectInput("timeRange", "Time Range:", choices = c("1 Month", "3 Months", "6 Months", "1 Year"), selected = "3 Months", width = "100%")
),
card(class = "p-3 bg-light", plotlyOutput("stockChart", height = "400px")),
layout_column_wrap(
width = 1/3,
value_box(title = "Opening Price", value = textOutput("openPrice"), showcase = bsicons::bs_icon("arrow-up-right")),
value_box(title = "Closing Price", value = textOutput("closePrice"), showcase = bsicons::bs_icon("arrow-down-right")),
value_box(title = "Trading Volume", value = textOutput("volume"), showcase = bsicons::bs_icon("bar-chart"))
)
)
)
)
),
# Stock data modal
div(id = "stockTableModal", class = "modal-overlay",
div(class = "modal-content",
span(id = "closeModal", class = "close-modal", HTML("×")),
h3("Stock Data Table"),
div(id = "stockTableContainer", DTOutput("stockTable"))
)
),
# Footer that stays at the bottom
div(class = "footer",
div(class = "footer-icons",
a(href = "https://github.com", target = "_blank", HTML("<i class='fab fa-github'></i> GitHub")),
a(href = "https://linkedin.com", target = "_blank", HTML("<i class='fab fa-linkedin'></i> LinkedIn")),
a(href = "mailto:contact@example.com", HTML("<i class='fas fa-envelope'></i> Contact"))
),
div(class = "footer-text", HTML("© 2023 Economic Dashboard by Loccx78. All rights reserved."))
)
)
server <- function(input, output, session) {
observeEvent(input$showTableBtn, {
# This runs when the button is clicked
runjs('
document.querySelector(".modal-overlay").style.display = "flex";
')
})
# Also make sure you have a handler to close the modal
observeEvent(input$closeModal, {
runjs('
document.querySelector(".modal-overlay").style.display = "none";
')
})
# Sample data for line chart (Overview tab)
gdp_data <- data.frame(
Year = 2015:2023,
GDP = c(18.2, 18.7, 19.5, 20.5, 21.4, 20.9, 22.9, 25.0, 26.9)
)
# Overview tab output
output$lineChart <- renderPlotly({
plot_ly(gdp_data, x = ~Year, y = ~GDP, type = 'scatter', mode = 'lines+markers') %>%
layout(title = "Annual GDP Growth",
xaxis = list(title = "Year"),
yaxis = list(title = "GDP in Trillion USD"))
})
# Map tab - Static output
output$staticMap <- renderPlot({
selected_year <- input$selectYear
# For demonstration, just showing different colors for different years
par(mar = c(0,0,2,0))
# Simple placeholder map
plot(1:10, 1:10, type = "n", xlab = "", ylab = "",
main = paste("Static Economic Map for Year", selected_year))
text(5, 5, paste("Economic Data for", selected_year), cex = 1.5)
})
# Map tab - Interactive output
output$interactiveMap <- renderLeaflet({
selected_year <- input$selectYear2
# Create a basic interactive map with sample points
leaflet() %>%
addTiles() %>%
setView(lng = 0, lat = 30, zoom = 2) %>%
addMarkers(lng = c(-74, -0.1, 116.4, 151.2),
lat = c(40.7, 51.5, 39.9, -33.9),
popup = c(paste("New York -", selected_year),
paste("London -", selected_year),
paste("Beijing -", selected_year),
paste("Sydney -", selected_year)))
})
# Stock tab outputs
output$stockChart <- renderPlotly({
selected_company <- input$selectCompany
# Generate sample stock data based on selected company
companies <- c("Apple", "Google", "Microsoft", "Amazon")
set.seed(which(companies == selected_company))
days <- 90
dates <- seq(as.Date("2023-01-01"), by = "day", length.out = days)
stock_price <- cumsum(rnorm(days, mean = 0.1, sd = 1)) + 100
stock_data <- data.frame(
Date = dates,
Price = stock_price
)
plot_ly(stock_data, x = ~Date, y = ~Price, type = 'scatter', mode = 'lines') %>%
layout(title = paste(selected_company, "Stock Performance"),
xaxis = list(title = "Date"),
yaxis = list(title = "Stock Price ($)"))
})
# Stock table data
output$stockTable <- renderDT({
selected_company <- input$selectCompany
companies <- c("Apple", "Google", "Microsoft", "Amazon")
# Generate sample stock data for table
set.seed(which(companies == selected_company))
days <- 30
dates <- seq(as.Date("2023-01-01"), by = "day", length.out = days)
stock_price <- cumsum(rnorm(days, mean = 0.1, sd = 1)) + 100
volume <- sample(100000:1000000, days)
open_price <- stock_price - rnorm(days, mean = 0, sd = 0.5)
close_price <- stock_price + rnorm(days, mean = 0, sd = 0.5)
stock_table <- data.frame(
Date = dates,
Open = round(open_price, 2),
High = round(pmax(stock_price, open_price, close_price), 2),
Low = round(pmin(stock_price, open_price, close_price), 2),
Close = round(close_price, 2),
Volume = volume
)
datatable(stock_table,
options = list(pageLength = 10),
caption = paste("Stock Data for", selected_company))
})
}
shinyApp(ui = ui, server = server)
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/view/save_main.R")
line$ui("line")
map$ui("map")
uiOutput("staticmap_ui")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
shiny::runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
shiny::runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/logic/func_stock.R")
shiny::runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
shiny::runApp()
library(shiny)
library(shiny.semantic)
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
shiny::runApp()
rhino::build_js()
rhino::build_js()
rhino::build_js()
shiny::runApp()
runApp()
rhino::build_js()
rhino::build_sass()
shiny::runApp()
rhino::build_js()
rhino::build_js()
runApp()
shiny::runApp()
rhino::build_js()
runApp()
rhino::build_js()
runApp()
rhino::build_js()
runApp()
rhino::build_js()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
# Call modules:
box::use(
app/view/line,
app/view/map,
app/view/onl_map,
app/view/stock,
app/view/table,
app/view/filters[timelineInput,shipping_selector_ui,timelineInput_test],
data/data[china_data_2000,china_gdp_sf,china_gdp_long],
app/constant[COMPANIES],
app/logic/func_stock[prepare_stock_data]
)
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/view/onl_map.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
renv::install("box")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
box::use(
app/view/line,
app/view/map,
app/view/onl_map,
app/view/stock,
app/view/table,
app/view/filters[timelineInput,shipping_selector_ui],
data/data[china_data_2000,china_gdp_sf,china_gdp_long],
app/constant[COMPANIES],
app/logic/func_stock[prepare_stock_data]
)
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
shiny::runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
box::use(
app/view/line,
app/view/map,
app/view/onl_map,
app/view/stock,
app/view/table,
app/view/filters[timelineInput,shipping_selector_ui],
data/data[china_data_2000,china_gdp_sf,china_gdp_long],
app/constant[COMPANIES],
app/logic/func_stock[prepare_stock_data]
)
df <- prepare_stock_data()
df
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
data_filter = unname(COMPANIES$names)
data_filter
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
shiny::runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
runApp()
shiny::runApp()
box::use(
app/view/line,
app/view/map,
app/view/onl_map,
app/view/stock,
app/view/table,
app/view/filters[timelineInput,shipping_selector_ui],
data/data[china_data_2000,china_gdp_sf,china_gdp_long],
app/constant[COMPANIES],
app/logic/func_stock[prepare_stock_data]
)
line$ui("line")
map$ui("map")
onl_map$ui("onl_map")
stock$ui("stock")
table$ui("table")
shiny::runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
runApp()
shiny::runApp()
stock$server
box::use(
app/view/line,
app/view/map,
app/view/onl_map,
app/view/stock,
app/view/table,
app/view/filters[timelineInput,shipping_selector_ui],
data/data[china_data_2000,china_gdp_sf,china_gdp_long],
app/constant[COMPANIES],
app/logic/func_stock[prepare_stock_data]
)
stock$server
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/view/line.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/view/onl_map.R")
shiny::runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/view/onl_map.R")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/view/onl_map.R")
shiny::runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
runApp()
# This file allows packrat (used by rsconnect during deployment) to pick up dependencies.
library(bslib)
library(dplyr)
library(DT)
library(ggplot2)
library(ggthemes)
library(highcharter)
library(htmltools)
library(htmlwidgets)
library(leaflet)
library(patchwork)
library(rhino)
library(rnaturalearth)
library(shiny)
library(stringr)
library(tidyquant)
library(tidyr)
library(tidyverse)
library(ggstatsplot)
library(plotly)
source("~/Xuân Lộc/R/Project R/china-vs-usa/dependencies.R")
runApp()
box::use(
app/view/line,
app/view/map,
app/view/onl_map,
app/view/stock,
app/view/table,
app/view/filters[timelineInput,shipping_selector_ui],
data/data[china_data_2000,china_gdp_sf,china_gdp_long],
app/constant[COMPANIES],
app/logic/func_stock[prepare_stock_data]
)
c(sort(unique(china_gdp_sf$Year))
)
c("All",unname(COMPANIES$names))
runApp()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/view/onl_map.R")
renv::install("leaflet.extras")
renv::snapshot()
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/view/onl_map.R")
c("All",unname(COMPANIES$names))
selected_company = "Maersk Line"
data_filter = unname(COMPANIES$names)
data_filter
data_check = data_filter
names(which(data_check == selected_company))
COMPANIES
data_check = COMPANIES$names
COMPANIES$names
names(which(data_check == selected_company))
shiny::runApp()
df <- prepare_stock_data()
box::use(
app/view/line,
app/view/map,
app/view/onl_map,
app/view/stock,
app/view/table,
app/view/filters[timelineInput,shipping_selector_ui],
data/data[china_data_2000,china_gdp_sf,china_gdp_long],
app/constant[COMPANIES],
app/logic/func_stock[prepare_stock_data]
)
df <- prepare_stock_data()
company = "All"
stock_data <- df
if(company == "All") {
stock_data$stock_data
} else {
stock_data$individual_stock_data
}
df
names(df)
class(df)
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/view/stock.R")
runApp()
df <- prepare_stock_data()
class(df)
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
shiny::runApp()
line$ui("line")
source("~/Xuân Lộc/R/Project R/china-vs-usa/app/main.R")
line$ui("line")
map$ui("map")
onl_map$ui("onl_map")
stock$ui("stock")
table$ui("table")
rhino::build_js()
runApp()
shiny::runApp()
rhino::build_js()
shiny::runApp()
rhino::build_js()
runApp()
